<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code_bases on filipecn</title>
    <link>/code_base/</link>
    <description>Recent content in Code_bases on filipecn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/code_base/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>/code_base/hello-circe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code_base/hello-circe/</guid>
      <description>hello circe #include &amp;lt;circe/circe.h&amp;gt; struct alignas(16) vec3_16 { vec3_16() = default; vec3_16(float x, float y, float z) : x(x), y(y), z(z) {} vec3_16 &amp;amp;operator=(const circe::Color &amp;amp;color) { x = color.r; y = color.g; z = color.b; return *this; } float x{0}; float y{0}; float z{0}; }; class HelloCirce : public circe::gl::BaseApp { public: struct alignas(16) PBR_UB { vec3_16 albedo; float metallic{}; float roughness{}; float ao{}; } pbr_ubo_data; HelloCirce() : BaseApp(800, 800) { /// setup mesh ////////////////////////////////////////////////////////////  // mesh = circe::gl::SceneModel::fromFile(&amp;#34;teapot.</description>
    </item>
    
    <item>
      <title></title>
      <link>/code_base/pbr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code_base/pbr/</guid>
      <description>pbr shader vertex shader #version 440 core layout(location = 0) in vec3 position; layout(location = 1) in vec3 normal; layout(location = 3) uniform mat4 projection; layout(location = 4) uniform mat4 model; layout(location = 5) uniform mat4 view; out vec3 fPosition; out vec3 fNormal; void main() { fPosition = vec3(model * vec4(position, 1.0)); fNormal = mat3(transpose(inverse(model))) * normal; gl_Position = projection * view * vec4(fPosition, 1.0); }; fragment shader #version 440 core  in vec3 fPosition; in vec3 fNormal; out vec4 outColor; layout(std430, binding = 1) buffer layoutName { struct { vec3 position; vec3 color; } lights[]; }; layout (std140) uniform PBR { vec3 albedo; float metallic; float roughness; float ao; }; uniform vec3 camPos; const float PI = 3.</description>
    </item>
    
  </channel>
</rss>
